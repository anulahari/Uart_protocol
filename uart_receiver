module uartrece(
input wire clk,rst,rx,parity_enable,parity_type,
output reg [7:0] rx_data,
output reg rx_done,parity_error );
parameter CLK_PER_BIT = 16;
parameter IDLE      = 3'd0;
    parameter START     = 3'd1;
    parameter RECEIVE   = 3'd2;
    parameter PARITY    = 3'd3;
    parameter STOP      = 3'd4;
    reg [2:0] state = IDLE;
    reg [13:0] clk_count = 0;
    reg [2:0] data_ind = 0;
    reg [7:0] data_reg = 0;
    reg parity_bit = 0;
always @(posedge clk or rst ) begin 
if (rst) begin
            state <= IDLE;
            clk_count <= 0;
            data_ind <= 0;
            rx_data <= 0;
            data_reg <= 0;
            rx_done <= 0;
            parity_error <= 0;
            end 
            else begin
            case (state)
            IDLE : begin 
            rx_done <= 0;
                    parity_error <= 0;
                    if (rx == 0) begin
                        clk_count <= 0;
                        state <= START;
                    end
                end
 START: begin
    if (clk_count == CLK_PER_BIT / 2) begin
        if (rx == 0) begin
            clk_count <= 0;
            data_ind <= 0;
            state <= RECEIVE;
        end 
        else
            state <= IDLE ;
       end 
    else 
        clk_count <= clk_count + 1;
end
 RECEIVE: begin
    if (clk_count < CLK_PER_BIT - 1) begin
        clk_count <= clk_count + 1;
    end else begin
        clk_count <= 0;
        data_reg[data_ind] <= rx;  
        if (data_ind == 3'd7) 
            state <= PARITY;
 else  data_ind <= data_ind + 1;
  end
end
PARITY : begin 
 if (clk_count < CLK_PER_BIT - 1) begin
     clk_count <= clk_count + 1;
        end 
  else
         begin
clk_count <= 0;
  parity_bit <= rx;
  if ((parity_type == 0 && parity_bit != ^data_reg) ||
  (parity_type == 1 && parity_bit != ~^data_reg))
 begin 
   parity_error <= 1; end 
  state <= STOP;
  end 
  end 
  STOP : begin 
  if (clk_count < CLK_PER_BIT - 1) begin
                        clk_count <= clk_count + 1;
                    end else begin
                        clk_count <= 0;
                        if (rx==1) begin 
                         rx_data <= data_reg;
                         rx_done <= 1;
                         end 
                      state <= IDLE;
                      end 
                      end
                      endcase 
                      end 
                      end
       endmodule
